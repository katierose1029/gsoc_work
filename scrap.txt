from mpl traits file scrap 



"""matplotlib.axes.Axes
"""
# class AxesTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.axes.Axes
#
#     def validate(self, obj, value):
#         value = super(Axes, self).validate(obj, value)
#         if value not in (getattr(obj, self.name), None):
#             raise ValueError("Can not reset the axes. You are "
#                 "probably trying to re-use an artist in more "
#                 "than one Axes which is not supported.")
#         if value is not None and value is not self:
#             obj.stale_callback = _stale_axes_callback
#         return value

"""matplotlib.figure.Figure
"""
# class FigureTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.figure.Figure
#
#     def validate(self, obj, value):
#         value(Figure, self).validate(obj, value)
#         if value not in (getattr(obj, self.name), None):
#             raise RuntimeError("Can not put single artist in "
#                                "more than one figure")
#         if value is not None and value is not self:
#             self.pchanged()
#         self.stale = True
#         return value

# """matplotlib.axes.Axes
# """
# class AxesTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.axes.Axes
#
#     def validate(self, obj, value):
#         value = super(Axes, self).validate(obj, value)
#         if value not in (getattr(obj, self.name), None):
#             raise ValueError("Can not reset the axes. You are "
#                 "probably trying to re-use an artist in more "
#                 "than one Axes which is not supported.")
#         if value is not None and value is not self:
#             obj.stale_callback = _stale_axes_callback
#         return value
#
# """matplotlib.figure.Figure
# """
# class FigureTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.figure.Figure
#
#     def validate(self, obj, value):
#         value(Figure, self).validate(obj, value)
#         if value not in (getattr(obj, self.name), None):
#             raise RuntimeError("Can not put single artist in "
#                                "more than one figure")
#         if value is not None and value is not self:
#             self.pchanged()
#         self.stale = True
#         return value


#
# class TransformTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.transforms.Transform
#
#     def validate(self, obj, value):
#         value(Transform, self).validate(obj, value)
#         if value

"""BboxTrait -> will be used to create
    1. window_extent
    2. clip box
"""
# class BboxTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.transforms.Bbox
#
#     def validate(self, obj, value):
#         value.(Bbox, self).validate(obj, value)

# class PathTrait(TypeCast):


# class PatchTrait(TypeCast):
#
#     allow_none = True
#     default_value = None
#     klass = matplotlib.path.Path
#
#     def validate(self, obj, value)


_________________________________________________________________________________________________________________________________



# class ClipPathTrait(TraitType):
#
#
#     """
#     value[0] = matplotlib.path.Path
#     value[1] = TransformTrait: if None is input TransformTrait validation logic will return Idenity Trait which
#     is a trait
#     """
#     def validate(self, obj, value):
#         if isinstance(value, tuple):
#             if len(value)==2:
#                 if isinstance(value[0], 'matplotlib.path.Path') and isinstance(value[1], TransformTrait):
#                     path = value[0]
#                     transform = value[1]
#                     return value
#
#     def __init__(self, trait):
#         # pass
#         self.__trait = trait
#
#     def instance_init(self, obj):
#         # pass
#         self.__trait.instance_init(obj)
#
#     def class_init(self, cls, name):
#         # pass
#         self.__trait.class_init(cls, name)
#
#     # reference artist.py set_clip_path function
#     def set(self, obj, value):
#
#         #import statements
#         from matplotlib.patches import Patch, Rectangle
#         from matplotlib.path import Path
#
#         #extract values from value
#         path = value[0]
#         transform = value[1]
#
#         #used for error checking
#         success = False
#
#         if transform is None:
#             if isinstance(path, Rectangle):
#                 #we have to input a clipbox as well...
#                 self.__trait.set(obj, None)
#                 # self.clipbox = TransformedBbox(Bbox.unit(), path.get_transform())
#                 # self._clippath = None
#                 success = True
#             elif isinstance(path, Patch):
#                 self.__trait.set(obj, TransformedPatchPath(path))
#                 # self._clippath = TransformedPatchPath(path)
#                 success = True
#             elif isinstance(path, tuple):
#                 path, transform = path
#
#         if path is None:
#             self.__trait.set(obj, None)
#             # self._clippath = None
#             success = True
#         elif isinstance(path, Path):
#             self.__trait.set(obj, TransformedPath(path, transform))
#             # self._clippath = TransformedPath(path, transform)
#             success = True
#         elif isinstance(path, TransformedPatchPath) or isinstance(path, TransformedPath):
#             # self._clippath = path
#             self.__trait.set(obj, path)
#             success = True
#         # elif isinstance(path, TransformedPath):
#         #     self.__trait.set(obj, path)
#         #     # self._clippath = path
#         #     success = True
#         if not success:
#             print(type(path), type(transform))
#             raise self.error("Invalid arguments to set_clip_path")
#         # pass
#         # self.__trait.set(obj, val)
#
#     def get(self, obj, cls):
#         # pass
#         return self.__trait.get(obj, cls)
#
#     def __getattr__(self, name):
#         # pass
#         return getattr(self.__trait, name)

_________________________________________________________________________________________________________________________________

#To do: create either a clippath trait or modify the get and set functions
    #for now i have comments down for default, validate and observer decortors
    #clippath default
    # @default("clippath")
    # def _clippath_default(self):
    #     print("generating default clippath value")
    #     return None
    # #clippath validate: reference set_clip_path
    # @validate("clippath")
    # def _clippath_validate(self, proposal):
    #     print("cross validating %r" % proposal.value)
    #     from matplotlib.patches import Patch, Rectangle
    #     success = False
    #     #note sure how to go about the validation yet but taking a shot
    #     #referring to the set_clip_path function
    #
    #     #validate the TransformTrait here: Needs to be determined if it is None here
    #     #if this statement is true:
    #     if proposal.TransformTrait()
    #     if isinstance(path, Rectangle):
    #         self.clipbox = TransformedBbox(Bbox.unit(), path.get_transform())
    #         self._clippath = None
    #         success = True
    #     elif isinstance(path, Patch):
    #         self._clippath = TransformedPatchPath(path)
    #         success = True
    #     elif isinstance(path, tuple):
    #         path, transform = path
    #
    #     if path is None:
    #         self._clippath = None
    #         success = True
    #     elif isinstance(path, Path):
    #         self._clippath = TransformedPath(path, transform)
    #         success = True
    #     elif isinstance(path, TransformedPatchPath):
    #         self._clippath = path
    #         success = True
    #     elif isinstance(path, TransformedPath):
    #         self._clippath = path
    #         success = True
    #
    # # if setting the clip path is not a success
    # if not success:
    #     print(type(path), type(transform))
    #     raise TypeError("Invalid arguments to set_clip_path")
    
    
_________________________________________________________________________________________________________________________________

# outside of the artist/artist inspector
#ArtistInspector needed for the following functions below
# def getp(obj, property=None):
#     """
#     Return the value of object's property.  *property* is an optional string
#     for the property you want to return
#
#     Example usage::
#
#         getp(obj)  # get all the object properties
#         getp(obj, 'linestyle')  # get the linestyle property
#
#     *obj* is a :class:`Artist` instance, e.g.,
#     :class:`~matplotllib.lines.Line2D` or an instance of a
#     :class:`~matplotlib.axes.Axes` or :class:`matplotlib.text.Text`.
#     If the *property* is 'somename', this function returns
#
#       obj.get_somename()
#
#     :func:`getp` can be used to query all the gettable properties with
#     ``getp(obj)``. Many properties have aliases for shorter typing, e.g.
#     'lw' is an alias for 'linewidth'.  In the output, aliases and full
#     property names will be listed as:
#
#       property or alias = value
#
#     e.g.:
#
#       linewidth or lw = 2
#     """
#     if property is None:
#         insp = ArtistInspector(obj)
#         ret = insp.pprint_getters()
#         print('\n'.join(ret))
#         return
#
#     func = getattr(obj, 'get_' + property)
#     return func()

# alias
# get = getp


# def setp(obj, *args, **kwargs):
#     """
#     Set a property on an artist object.
#
#     matplotlib supports the use of :func:`setp` ("set property") and
#     :func:`getp` to set and get object properties, as well as to do
#     introspection on the object.  For example, to set the linestyle of a
#     line to be dashed, you can do::
#
#       >>> line, = plot([1,2,3])
#       >>> setp(line, linestyle='--')
#
#     If you want to know the valid types of arguments, you can provide
#     the name of the property you want to set without a value::
#
#       >>> setp(line, 'linestyle')
#           linestyle: [ '-' | '--' | '-.' | ':' | 'steps' | 'None' ]
#
#     If you want to see all the properties that can be set, and their
#     possible values, you can do::
#
#       >>> setp(line)
#           ... long output listing omitted
#
#     You may specify another output file to `setp` if `sys.stdout` is not
#     acceptable for some reason using the `file` keyword-only argument::
#
#       >>> with fopen('output.log') as f:
#       >>>     setp(line, file=f)
#
#     :func:`setp` operates on a single instance or a iterable of
#     instances. If you are in query mode introspecting the possible
#     values, only the first instance in the sequence is used. When
#     actually setting values, all the instances will be set.  e.g.,
#     suppose you have a list of two lines, the following will make both
#     lines thicker and red::
#
#       >>> x = arange(0,1.0,0.01)
#       >>> y1 = sin(2*pi*x)
#       >>> y2 = sin(4*pi*x)
#       >>> lines = plot(x, y1, x, y2)
#       >>> setp(lines, linewidth=2, color='r')
#
#     :func:`setp` works with the MATLAB style string/value pairs or
#     with python kwargs.  For example, the following are equivalent::
#
#       >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style
#       >>> setp(lines, linewidth=2, color='r')        # python style
#     """
#
#     if not cbook.iterable(obj):
#         objs = [obj]
#     else:
#         objs = list(cbook.flatten(obj))
#
#     if not objs:
#         return
#
#     insp = ArtistInspector(objs[0])
#
#     # file has to be popped before checking if kwargs is empty
#     printArgs = {}
#     if 'file' in kwargs:
#         printArgs['file'] = kwargs.pop('file')
#
#     if not kwargs and len(args) < 2:
#         if args:
#             print(insp.pprint_setters(prop=args[0]), **printArgs)
#         else:
#             print('\n'.join(insp.pprint_setters()), **printArgs)
#         return
#
#     if len(args) % 2:
#         raise ValueError('The set args must be string, value pairs')
#
#     # put args into ordereddict to maintain order
#     funcvals = OrderedDict()
#     for i in range(0, len(args) - 1, 2):
#         funcvals[args[i]] = args[i + 1]
#
#     ret = [o.update(funcvals) for o in objs]
#     ret.extend([o.set(**kwargs) for o in objs])
#     return [x for x in cbook.flatten(ret)]
#
#
# def kwdoc(a):
#     hardcopy = matplotlib.rcParams['docstring.hardcopy']
#     if hardcopy:
#         return '\n'.join(ArtistInspector(a).pprint_setters_rest(
#                          leadingspace=2))
#     else:
#         return '\n'.join(ArtistInspector(a).pprint_setters(leadingspace=2))
#
# docstring.interpd.update(Artist=kwdoc(Artist))

# _get_axes_msg = """{0} has been deprecated in mpl 1.5, please use the
# axes property.  A removal date has not been set."""